###################################
# Tâche 1 - Valider les commandes #
###################################
1 - Il peut y avoir des commandes incorrectes. Une commande est incorrecte si :
	a - Le nom du client ou le plat n’existe pas (vu précédemment).
	b - Des chiffres sont erronés (quantité de plats commandés).

1-a : 	À partir de la lecture du fichier d'entrée on a une liste de clients et
		de plats. Avec ceux-ci on peut crée des tableaux contenant les clients
		et les plats existants pour valider les commandes. On passe chaque commande
		dans une méthode validerCommande(commande) qui par la suite validerClient(client) 
		et validerPlat(plat). Si les deux indique valide on passe à la création de la
		commande sinon on retourne un message d'erreur selon lequel est invalide.

1-b :	À partir de la lecture du fichier d'entrée on peut obtenir les commandes.
		On procède à valider les commandes avec validerCommande(commande). Cette
		méthode appèle une autre méthode validerQuantite(quantite) qui vérifie
		si la quantité est un chiffre entier positif plus grand que 0.

############################
# Fonctionalités à ajouter #
############################

#################
# Commande.java #
#################
private static List<Commande> listeCommandes
private static String erreurs;
Commande.getErreurs()
Commande.getListeCommandes()
Commande.setListeCommandes(listeCommandes)
Commande.validerCommande(commande)
	Prend un objet de type Commande en paramètre. Appèle les méthodes
	validerPlat(commande.getPlatCommander()), validerClient(commande.getClient()) 
	et validerQuantite(commande.getQteCommande()).
	Si une de ces méthode retourne invalide, affiche le message suivant :
		"Commande : <commande> 
		Détails : <message(s) d'erreur des méthodes>"
Commande.validerQuantite(quantite)
	prend un objet de type String qui signifie la quantité de plat commandé
	et vérifie s'il consiste d'un chiffre entier positif plus grand que 0.
	Si invalide retourne le message d'erreur : "La quantité de plat commandé 
	est invalide."

#############
# Plat.java #
#############
private static List<Plat> listePlats;
Plat.getListePlats()
Plat.setListePlats(listePlats)
Plat.validerPlat(plat)
	Prend un objet de type Plat en paramètre. Vérifie que la plat existe
	dans la liste de plat dans listePlats. Si invalide retourne 
	le message d'erreur : "Le plat <nom du plat> n'existe pas."
									
###############
# Client.java #
###############
private static List<Client> listeClients;
Client.getListeClients()
Client.setListeClients(listeClients)
Client.validerClient(client)
	prend un objet de type Client en paramètre. Vérifie que le client
	existe dans la liste de client dans listeClients. Si invalide
	retourne le message d'erreur : "Le client <nom du client> n'existe pas."

##################################
# Tâche 2 - Afficher une facture #
##################################
2 - En sortie, on souhaite avoir une facture affichée à l’écran (terminal) et éditée dans le
fichier (Facture-du-date-heure.txt).

La fonctionalité pour affichée à l'écran et éditée dans un fichier existe.
Il faut juste changer la nomenclature du fichier sortie à Facture-du-date-heure.txt

